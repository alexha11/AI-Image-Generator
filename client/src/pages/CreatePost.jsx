import React, {useState, useEffect} from 'react';
import { useNavigate } from 'react-router-dom';
import { preview } from '../assets';
import { getRandomPrompt } from '../utils';
import { FormField, Loader } from '../components';

import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const CreatePost = () => {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    name: '',
    prompt: '',
    photo: '',
  });

  const [generatingText, setGeneratingText] = useState(false);
  const [loading, setLoading] = useState(false);
  const [count, setCount] = useState(null);
  const [reset, setReset] = useState(false);
  const [password, setPassword] = useState('');

  useEffect(() => {
    const fetchCount = async () => {
      try {
        const response = await fetch('http://localhost:8080/api/v1/count');
        const data = await response.json();
        console.log(data);
        setCount(data.data.count);
      } catch (error) {
        console.error('Error fetching count:', error);
      }
    };

    fetchCount();
  }, []);

  useEffect(() => {
    const updateCount = async () => {
      try {
        await fetch('http://localhost:8080/api/v1/count', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ count }),
        });
      } catch (error) {
        console.error('Error updating count:', error);
      }
    };

    if (count >= 0) {
      updateCount();
    }
  }, [count]);

  const succesNoti = (text) => {
    toast.success(text, {
      position: 'top-right',
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      theme: 'colored',
      progress: undefined,
    });
    return;
  }

  const errorNoti = () => {
    toast.error('Please enter correct passworld!', {
      position: 'top-right',
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      theme: 'colored',
      progress: undefined,
    });
    return;
  }
  const generateImage = async () => {
    if (form.prompt) {
      try {
        if(count >= 10) {
          alert('You have reached the limit of 10 images');
          return;
        }
        setGeneratingText(true);
        const response = await fetch('https://ai-image-generator-f5m8.onrender.com/api/v1/dalle', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ prompt: form.prompt}),
        });
        const data = await response.json();
        console.log(data);
        setForm({ ...form, photo:  'data:image/jpeg;base64,' + data.photo });
        setGeneratingText(false);
        setCount(count + 1);
        succesNoti('Image generated successfully');
      } catch (error) {
        console.log(error);
    }
    finally {
      setGeneratingText(false);
    }
    } else {
      alert('Please enter a prompt');
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (form.prompt && form.photo) {
      try {
        setLoading(true);
        const response = await fetch('https://ai-image-generator-f5m8.onrender.com/api/v1/post', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(form),
        });
        const data = await response.json();
        console.log(data);
        navigate('/');
        succesNoti('Image shared successfully');

      } catch (error) {
        console.log(error);
      } finally {
        setLoading(false);
      }
    } else {
      alert('Please enter a prompt and generate an image');
    }
  }

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });


  const handleGenerateText =  () => {
    const randomPrompt =  getRandomPrompt(form.prompt);
    setForm({ ...form, prompt: randomPrompt });
  }

  const checkPassword = () => {
    if(password === import.meta.env.VITE_PASSWORD) {
      succesNoti('Usage limit resets successfully');
      setCount(0);
      setReset(false);
      setPassword('');
    } else {
      errorNoti();
    }
  }

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">Create </h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">Create imaginative and visually stunning images generated by DALL-E AI and share them with the community</p>
      </div> 
      <form className='mt-16 max-w-3xl' onSubmit={handleSubmit}>
        <div className='flex flex-col gap-5'>
          <FormField
              LabelName='Your name'
              type='text'
              name='name'
              placeholder='Ex., Duong'
              value={form.name}
              handleChange={handleChange}
              />

          <FormField
            LabelName='Prompt'
            type='text'
            name='prompt'
            placeholder='Enter your prompt'
            value={form.prompt}
            handleChange={handleChange}
            isSupriseMe={true}
            handleGenerating={handleGenerateText}
          />
          <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-sm  rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 flex justify-center items-center">
            {form.photo ? (
              <img src={form.photo} alt={form.prompt} className="w-full h-full object-contain" />
            ) : (
              <img src={preview} alt='preview' className="w-9/12 h-9/12 object-contain opacity-40" />
              )}
            {generatingText && (
              <div className='absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg '>
                <Loader/>
              </div>
            )}
          </div>
        </div>
        <div className='mt-5 flex items-center gap-5'> 
            <button
            type='button'
            onClick={generateImage}
            className='text-white bg-[#5adbb5] hover:bg-[#5dbea3] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center'
            >
              {generatingText ? 'Generating...' : 'Generate'}
            </button>
            <p className='text-[#222629] text-[14px] inline'>Limit per reset: {count ? <div className='inline'>{count} / 10</div> : <div className='inline h-6 w-6'><Loader/></div>}</p>
        </div>
        <div className='mt-10'>
          <p className='mt-2 text-[#666e75] text-[14px]'>Once you have created the image you want, you can share it to the community</p>
          <button
            type='submit'
            className='text-white bg-[#4681f4] hover:bg-[#5783db] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center mt-5'>
              {loading ? 'Sharing...' : 'Share with the community'}
          </button>
        </div>
        
        
      </form>
      
      <div className='mt-36'>
            <div className='bg-black w-full h-[0.5px]'></div>
            <h2 className='text-[#222328] text-[25px] font-semibold'>Usage Limit</h2>
            <p className='text-[#666e75] text-[12px] inline'>Note: Users can generate images up to 10 times. Only an admin with the password can reset this limit. If you want to reset the usage limit, click here: </p>
            <button className='text-[#666e75] text-[14px] ml-3' onClick={() => {setReset(!reset)}}>Reset</button>
            <ToastContainer />
        </div>
        {
          reset && (
            <div className='mt-2'>
              <FormField
                LabelName='Password'
                type='password'
                name='password'
                placeholder='Enter password'
                value={password}
                handleChange={(e) => setPassword(e.target.value)}
              />
              <button
                type='button'
                className='text-white bg-[#5adbb5] hover:bg-[#5dbea3] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center mt-5'
                onClick={checkPassword}
                >
                  Reset
              </button>
            </div>
          )
        }
       
    </section>
  );
} 

export default CreatePost;